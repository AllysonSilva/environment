#######################
# Security HTTP Headers
#######################

# HSTS is used to force browsers to only connect using HTTPS.
# Declare that a website is only accessible over a secure connection (HTTPS).
# The HTTP Strict-Transport-Security response header (often abbreviated as HSTS) lets a web site tell browsers that it should only be accessed using HTTPS, instead of using HTTP.
# test: https://hstspreload.org/
add_header Strict-Transport-Security "max-age=15768000; includeSubdomains; preload" always;

# An HTTP header which indicates whether the browser should allow the webpage to be displayed in a frame within another webpage.
# Used as a defense against clickjacking attacks.
#
# Config to don't allow the browser to render the page inside an frame or iframe and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
#
# If you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri.
add_header X-Frame-Options DENY;

# When serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header, to disable content-type sniffing on some browsers.
#
# O header de resposta HTTP X-Content-Type-Options é um marcador usado pelo servidor para indicar que os MIME types enviados pelos headers Content-Type não devem ser alterados e seguidos.
# Isto permite que o usuário opte por não participar do chamado MIME Type Sniffing ou, em outras palavras, é uma forma de dizer que os webmasters estão vendo o que você está fazendo.
#
# note: nosniff só se aplica para tipos "script" e "style".
add_header X-Content-Type-Options "nosniff" always;

# The HTTP X-XSS-Protection response header is a feature of Internet Explorer, Chrome and Safari that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks.
# Although these protections are largely unnecessary in modern browsers when sites implement a strong Content-Security-Policy that disables the use of inline JavaScript ('unsafe-inline'), they can still provide protections for users of older web browsers that don't yet support CSP.
add_header X-XSS-Protection "1; mode=block";

# Mitigate cross-site scripting attacks by whitelisting allowed sources of script, style, and other resources.
#
# Prevent XSS, clickjacking, code injection attacks by implementing Content Security Policy (CSP) header in your web page HTTP response.
# CSP instruct browser to load allowed content to load on the website.
#
# more: http://caniuse.com/#feat=contentsecuritypolicy
add_header Content-Security-Policy "default-src 'none';
                                    script-src 'self' https://www.google-analytics.com https://ajax.googleapis.com;
                                    style-src 'self' https://fonts.googleapis.com;
                                    img-src 'self' data: blob: https://ssl.gstatic.com/ https://placehold.it;
                                    connect-src 'self';
                                    font-src 'self' https://themes.googleusercontent.com;
                                    object-src 'none';
                                    frame-src 'none';
                                    media-src 'self';
                                    child-src 'self';
                                    report-uri /csp/report
                                    form-action 'self';";

# Allow control of HTTP referrers via the referrer meta tag.
add_header Referrer-Policy "same-origin" always;

add_header X-Robots-Tag none;
add_header X-Download-Options noopen;
add_header X-Permitted-Cross-Domain-Policies none;

# Enabling Public Key Pinning Extension for HTTP (HPKP).
# The Public Key Pinning Extension for HTML5 (HPKP) is a security feature that tells a web client to associate a specific cryptographic public key with a certain web server to decrease the risk of MITM attacks with forged certificates.
#
# Declare that a website's HTTPS certificate should only be treated as valid if the public key is contained in a specified list to prevent MITM attacks that use valid CA-issued certificates.
#
# The HPKP header provides a web browser a way to confirm that the certificate presented by a domain is one that the domain issued.
# It’s a defense against man-in-the-middle attacks targeting SSL certificates, uncovering proxies that rewrite SSL traffic.
# It’s also a protection against rogue certificates that could be issued for any number of nefarious purposes.
#
# note: Only valid on SSL version of domain.
# add_header Public-Key-Pins 'pin-sha256="base64+primary=="; pin-sha256="base64+backup=="; max-age=5184000; includeSubDomains' always;
